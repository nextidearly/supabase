# name: CI/CD

# on:
#   push:
#     branches:
#       - main
#       - staging

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:13
#         ports:
#           - 5432:5432
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: postgres
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '20.14.0'

#       - name: Install dependencies
#         run: npm install

#       - name: Generate Prisma client
#         run: npx prisma generate

#       - name: Run migrations
#         env:
#           DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
#         run: npx prisma migrate deploy --preview-feature

#       - name: Run tests
#         run: npm test

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '20.14.0'

#       - name: Install dependencies
#         run: npm install

#       - name: Deploy to Staging
#         if: github.ref == 'refs/heads/staging'
#         env:
#           DATABASE_URL: '${{ secrets.STAGING_DB_URL }}'
#         run: |
#           npx prisma generate
#           npx prisma migrate deploy --preview-feature

#       - name: Deploy to Production
#         if: github.ref == 'refs/heads/main'
#         env:
#           DATABASE_URL: ${{ secrets.STAGING_DB_URL }}
#         run: |
#           npx prisma generate
#           npx prisma migrate deploy --preview-feature


name: CI

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase db start
      - run: supabase db lint
      - run: supabase test db

      - name: Verify generated types are checked in
        run: |
          supabase gen types typescript --local > types.gen.ts
          if ! git diff --ignore-space-at-eol --exit-code --quiet types.gen.ts; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

  dryrun:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: sbp_dbb495a45daef6399137a6c02d1e73508d808daa
      SUPABASE_DB_PASSWORD: p6FmVXNbYP5Sfwy1
      SUPABASE_PROJECT_ID: rrsqtkgrmbtqntxcdaex

    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase link --project-ref $SUPABASE_PROJECT_ID
      - run: supabase db push --dry-run