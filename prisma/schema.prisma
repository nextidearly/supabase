// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String  @unique
  user_name  String  @unique
  avatar_url String  @unique
  twitter_id String  @unique
  verified   Boolean

  // Define relationships
  tweets                Tweet[]
  wallets               Wallet[]
  userScores            UserScore[]
  invitesReferrer       Invite[]       @relation("referrer")
  invitesInvitee        Invite[]       @relation("invitee")
  campaignsAdmin        Campaign[]     @relation("admin")
  campaignsParticipants CampaignUser[]
  projects              Project[]
}

// Define the Campaign model
model Campaign {
  id                                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_id                            String   @db.Uuid
  project_id                          String   @db.Uuid
  created_at                          DateTime @default(dbgenerated("now()"))
  start_date                          DateTime
  end_date                            DateTime
  name                                String
  slug                                String   @unique
  keyword                             String
  reward_blockchain                   String
  reward_contract_address             String
  reward_amount                       Int
  published                           Boolean
  reward_ticker                       String
  reward_decimals                     Int
  logo_url                            String
  cover_image_url                     String
  min_participation_amount            Int
  min_participation_contract          String
  min_participation_condition         Boolean
  min_participation_contract_symbol   String
  min_participation_contract_decimals Int
  points                              Json

  // Define relationships
  admin                  User                    @relation("admin", fields: [admin_id], references: [id])
  project                Project                 @relation(fields: [project_id], references: [id])
  tweets                 Tweet[]
  campaignRetweets       CampaignRetweet[]
  users                  CampaignUser[]
  userScores             UserScore[]
  campaignFollowAccounts CampaignFollowAccount[]
}

// Define the Project model
model Project {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  slug     String @unique
  owner_id String @db.Uuid

  // Define relationships
  owner     User       @relation(fields: [owner_id], references: [id])
  campaigns Campaign[]
}

// Define the Tweet model
model Tweet {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at       DateTime @default(dbgenerated("now()"))
  retweet_count    Int
  reply_count      Int
  like_count       Int
  quote_count      Int
  bookmark_count   Int
  impression_count Int
  text             String
  type             String
  user_id          String   @db.Uuid
  campaign_id      String   @db.Uuid
  tweet_id         String
  score            Int

  // Define relationships
  user     User     @relation(fields: [user_id], references: [id])
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}

// Define the CampaignRetweet model
model CampaignRetweet {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id String @db.Uuid
  url         String
  points      Int

  // Define relationships
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}

// Define the Wallet model
model Wallet {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String @db.Uuid
  address    String @unique
  blockchain String

  // Define relationships
  user          User           @relation(fields: [user_id], references: [id])
  campaignUsers CampaignUser[]
}

// Define the UserScore model
model UserScore {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime @default(dbgenerated("now()"))
  user_id     String   @db.Uuid
  campaign_id String   @db.Uuid
  score       Int

  // Define relationships
  user     User     @relation(fields: [user_id], references: [id])
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}

// Define the Invite model
model Invite {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrer_id String @db.Uuid
  invitee_id  String @db.Uuid

  // Define relationships
  referrer User @relation("referrer", fields: [referrer_id], references: [id])
  invitee  User @relation("invitee", fields: [invitee_id], references: [id])
}

// Define the CampaignUser model
model CampaignUser {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String  @db.Uuid
  wallet_id      String  @db.Uuid
  campaign_id    String  @db.Uuid
  claimed_reward Boolean
  blacklisted    Boolean

  // Define relationships
  user     User     @relation(fields: [user_id], references: [id])
  wallet   Wallet   @relation(fields: [wallet_id], references: [id])
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}

// Define the CampaignFollowAccount model
model CampaignFollowAccount {
  id              String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id     String @db.Uuid
  twitter_account String
  points          Int

  // Define relationships
  campaign Campaign @relation(fields: [campaign_id], references: [id])
}


// Define the User model
model Test {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  test       String
}