// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Users model
model Users {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String          @unique
  user_name   String          @unique
  avatar_url  String          @unique
  twitter_id  String          @unique
  verified    Boolean
  side_score  Int
  created_at  DateTime        @default(dbgenerated("now()"))
  
  // Define relationships
  tweets                Tweets[]
  wallets               Wallets[]
  user_scores           UserScores[]
  invites_referrer      Invites[]       @relation("referrer")
  invites_invitee       Invites[]       @relation("invitee")
  campaigns_admin       Campaigns[]     @relation("admin")
  campaigns_participants CampaignUsers[]
  projects              Projects[]
  claims                UsersClaims[]   @relation("user_claims_to_users")

  @@map("users")
}

// Define the Campaigns model
model Campaigns {
  id                                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  admin_id                            String   @db.Uuid
  project_id                          String   @db.Uuid
  created_at                          DateTime @default(dbgenerated("now()"))
  start_date                          DateTime
  end_date                            DateTime
  name                                String
  slug                                String   @unique
  keyword                             String
  reward_blockchain                   String
  reward_contract_address             String
  reward_amount                       Int
  published                           Boolean
  reward_symbol                       String
  reward_decimals                     Int
  logo_url                            String
  cover_image_url                     String
  min_participation_amount            Int
  min_participation_contract          String
  min_participation_condition         Boolean
  min_participation_contract_symbol   String
  min_participation_contract_decimals Int
  points                              Json
  promoted                            Boolean   @default(false)

  // Define relationships
  admin                  Users                   @relation("admin", fields: [admin_id], references: [id])
  project                Projects                @relation(fields: [project_id], references: [id])
  tweets                 Tweets[]
  campaign_retweets      CampaignRetweets[]
  users                  CampaignUsers[]
  user_scores            UserScores[]
  campaign_follow_accounts CampaignFollowAccounts[]
  claims                 UsersClaims[]

  @@map("campaigns")
}

// Define the Projects model
model Projects {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  slug      String       @unique
  admin_id  String       @db.Uuid

  // Define relationships
  admin      Users        @relation(fields: [admin_id], references: [id])
  campaigns  Campaigns[]

  @@map("projects")
}

// Define the Tweets model
model Tweets {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime  @default(dbgenerated("now()"))
  retweet_count     Int
  reply_count       Int
  like_count        Int
  quote_count       Int
  bookmark_count    Int
  impression_count  Int
  text              String
  type              String
  user_id           String    @db.Uuid
  campaign_id       String    @db.Uuid
  tweet_id          String

  // Define relationships
  user      Users      @relation(fields: [user_id], references: [id])
  campaign  Campaigns  @relation(fields: [campaign_id], references: [id])
  user_scores UserScores[]

  @@map("tweets")
}

// Define the CampaignRetweets model
model CampaignRetweets {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id String    @db.Uuid
  url         String
  points      Int

  // Define relationships
  campaign Campaigns @relation(fields: [campaign_id], references: [id])

  @@map("campaign_retweets")
}

// Define the Wallets model
model Wallets {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String        @db.Uuid
  address     String        @unique
  blockchain  String

  // Define relationships
  user          Users          @relation(fields: [user_id], references: [id])
  campaign_users CampaignUsers[]

  @@map("wallets")
}

// Define the UserScores model
model UserScores {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime      @default(dbgenerated("now()"))
  user_id      String        @db.Uuid
  campaign_id  String        @db.Uuid
  score        Int
  campaign_user_id String    @db.Uuid
  tweet_id     String?       @db.Uuid

  // Define relationships
  user          Users          @relation(fields: [user_id], references: [id])
  campaign      Campaigns      @relation(fields: [campaign_id], references: [id])
  tweet         Tweets?        @relation(fields: [tweet_id], references: [id])
  users_claims  UsersClaims[]  @relation("user_score_claims")
  campaign_user CampaignUsers  @relation(fields: [campaign_user_id], references: [id])

  @@map("user_scores")
}

// Define the Invites model
model Invites {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  referrer_id  String    @db.Uuid
  invitee_id   String    @db.Uuid

  // Define relationships
  referrer  Users  @relation("referrer", fields: [referrer_id], references: [id])
  invitee   Users  @relation("invitee", fields: [invitee_id], references: [id])

  @@map("invites")
}

// Define the CampaignUsers model
model CampaignUsers {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @db.Uuid
  wallet_id       String    @db.Uuid
  campaign_id     String    @db.Uuid
  claimed_reward  Boolean
  blacklisted     Boolean

  // Define relationships
  user      Users      @relation(fields: [user_id], references: [id])
  wallet    Wallets    @relation(fields: [wallet_id], references: [id])
  campaign  Campaigns  @relation(fields: [campaign_id], references: [id])
  user_scores UserScores[]

  @@map("campaign_users")
}

// Define the CampaignFollowAccounts model
model CampaignFollowAccounts {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id      String    @db.Uuid
  twitter_account  String
  points           Int

  // Define relationships
  campaign Campaigns @relation(fields: [campaign_id], references: [id])

  @@map("campaign_follow_accounts")
}

// Define the UsersClaims model
model UsersClaims {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String       @db.Uuid
  campaign_id    String       @db.Uuid
  created_at     DateTime     @default(dbgenerated("now()"))
  user_score_id  String       @db.Uuid
  amount         Int

  // Define relationships
  user       Users         @relation("user_claims_to_users", fields: [user_id], references: [id])
  campaign   Campaigns     @relation(fields: [campaign_id], references: [id])
  user_score UserScores    @relation("user_score_claims", fields: [user_score_id], references: [id])

  @@map("users_claims")
}
